import React, { useState, useEffect, useRef } from 'react';
import { Plus, Trash2, BarChart3, Upload, X, Filter } from 'lucide-react';

const SCRAMBLE_DATA = `A1+,R' U R2 U2' R U2 R2 U' R U R2 U2' R' U2 R' ;
A1-,R U2 R2' U2 R U2' R U' R' U2' R' U2 R2 U' R' ;
A2+,R U2 R2' U2 R2' U R2 U2 R2 U2' R U' R' U R' ;
A2-,R U' R U R' U2 R2' U2' R2' U' R2 U2' R2 U2' R' ;
D-,R U2 R' U' R U R' U R U2' R' U2 R U2 R' ;`;

const SCRAMBLES = (() => {
  const s = {};
  SCRAMBLE_DATA.trim().split('\n').forEach(l => {
    const [n, str] = l.split(',');
    if (n && str) s[n.trim()] = str.split(';').map(x => x.trim()).filter(Boolean);
  });
  return s;
})();

const CASES = ['A1+','A1-','A2+','A2-','B1+','B1-','B2+','B2-','C1+','C1-','C2+','C2-','C3+','C3-','C4+','C4-','C5+','C5-','C6+','C6-','D+','D-','E1','E2','E3','F1+','F1-','F2+','F2-','F3+','F3-','F4+','F4-','F5+','F5-','G1+','G1-','G2+','G2-','H1+','H1-','H2+','H2-','I1+','I1-','I2+','I2-','I3+','I3-','I4+','I4-','I5+','I5-','I6+','I6-','J1+','J1-','J2+','J2-','J3+','J3-','K1+','K1-','K2+','K2-','L1','L2','L3+','L3-','L4+','L4-','L5+','L5-','L6+','L6-','M','N1+','N1-','N2+','N2-','O','P1+','P1-','P2+','P2-','P3+','P3-','P4+','P4-','Q1+','Q1-','Q2+','Q2-','R1+','R1-','R2+','R2-','R3+','R3-','R4+','R4-','S1+','S1-','S2+','S2-','S3+','S3-','S4+','S4-','S5+','S5-','S6+','S6-','T1','T2+','T2-','T3+','T3-','T4+','T4-','U1+','U1-','U2+','U2-','V1+','V1-','V2+','V2-','V3+','V3-','V4+','V4-','W','X1','X2','X3','X4','X5+','X5-','X6+','X6-','X7+','X7-','Y1+','Y1-','Y2+','Y2-','Y3+','Y3-','Z1','Z2','Z3'];

const useLocalStorage = (key, init) => {
  const [val, setVal] = useState(() => {
    try {
      const saved = localStorage.getItem(key);
      return saved ? JSON.parse(saved) : init;
    } catch (e) {
      console.error('localStorage read error:', e);
      return init;
    }
  });
  useEffect(() => { 
    try {
      localStorage.setItem(key, JSON.stringify(val));
    } catch (e) {
      console.error('localStorage write error:', e);
    }
  }, [key, val]);
  return [val, setVal];
};

export default function MegaminxPLLTrainer() {
  const [cases, setCases] = useLocalStorage('megaminx-cases', []);
  const [weakCases, setWeakCases] = useLocalStorage('megaminx-weak', []);
  const weakSet = new Set(Array.isArray(weakCases) ? weakCases : []);
  const [curr, setCurr] = useState(null);
  const [scr, setScr] = useState('');
  const [selG, setSelG] = useState(new Set(['ALL']));
  const [selC, setSelC] = useState(new Set());
  const [exp, setExp] = useState(new Set());
  const [form, setForm] = useState(false);
  const [newC, setNewC] = useState({ name: '', scramble: '', algorithm: '', image: '' });
  const [t, setT] = useState(0);
  const [run, setRun] = useState(false);
  const [rdy, setRdy] = useState(false);
  const [sort, setSort] = useState('name');
  const [prac, setPrac] = useState(false);
  const [stat, setStat] = useState(false);
  const [mode, setMode] = useState('random');
  const [queue, setQueue] = useState([]);
  const [prev, setPrev] = useState(null);
  const [prevT, setPrevT] = useState(0);
  const int = useRef(null);
  const down = useRef(null);
  const file = useRef(null);

  useEffect(() => {
    if (run) int.current = setInterval(() => setT(x => x + 10), 10);
    else clearInterval(int.current);
    return () => clearInterval(int.current);
  }, [run]);

  useEffect(() => {
    const kd = e => {
      if (e.code === 'Space' && !e.repeat && curr && prac) {
        e.preventDefault();
        if (!run && !rdy) { down.current = Date.now(); setRdy(true); }
        else if (run) stop();
      }
    };
    const ku = e => {
      if (e.code === 'Space' && rdy && !run && prac) {
        e.preventDefault();
        if (Date.now() - down.current >= 300) { setT(0); setRun(true); }
        setRdy(false); down.current = null;
      }
    };
    window.addEventListener('keydown', kd);
    window.addEventListener('keyup', ku);
    return () => { window.removeEventListener('keydown', kd); window.removeEventListener('keyup', ku); };
  }, [run, rdy, curr, prac]);

  const stop = () => {
    setRun(false);
    if (curr && t > 0) {
      const currentCases = Array.isArray(cases) ? cases : [];
      const upd = currentCases.map(c => c.id === curr.id ? { ...c, times: [...(c.times || []), t] } : c);
      if (!currentCases.find(c => c.id === curr.id)) {
        upd.push({ 
          id: curr.name, 
          name: curr.name, 
          times: [t], 
          algorithm: curr.algorithm || '', 
          image: curr.image || '', 
          scramble: '' 
        });
      }
      setCases(upd);
      setPrevT(t);
      setTimeout(next, 500);
    }
  };

  const ts = e => {
    if (!curr || !prac) return;
    e.preventDefault();
    if (!run && !rdy) { down.current = Date.now(); setRdy(true); }
    else if (run) stop();
  };

  const te = e => {
    if (!curr || !prac) return;
    e.preventDefault();
    if (rdy && !run && down.current) {
      if (Date.now() - down.current >= 300) { setT(0); setRun(true); }
      setRdy(false); down.current = null;
    }
  };

  const getL = () => ['ALL', ...Array.from(new Set(CASES.map(c => c[0]))).sort()];

  const togG = l => {
    const ng = new Set(selG);
    const all = getL().filter(x => x !== 'ALL');
    if (l === 'ALL') {
      if (ng.has('ALL')) { setSelG(new Set()); setSelC(new Set()); }
      else { setSelG(new Set(['ALL', ...all])); setSelC(new Set()); }
    } else {
      if (ng.has(l)) {
        ng.delete(l); ng.delete('ALL');
        const nc = new Set(selC);
        CASES.filter(c => c.startsWith(l)).forEach(c => nc.delete(c));
        setSelC(nc);
      } else { ng.add(l); ng.delete('ALL'); }
      if (all.every(x => ng.has(x))) { ng.add('ALL'); setSelC(new Set()); }
      setSelG(ng);
    }
  };

  const getFilt = () => {
    if (selG.size === 0 && selC.size === 0) return [];
    const map = new Map();
    if (Array.isArray(cases)) {
      cases.forEach(c => {
        if (c && c.name) map.set(c.name, c);
      });
    }
    Object.keys(SCRAMBLES).forEach(n => { 
      if (!map.has(n)) map.set(n, { id: n, name: n, times: [], algorithm: '', image: '' }); 
    });
    const all = Array.from(map.values());
    if (selC.size > 0) return all.filter(c => selC.has(c.name));
    if (selG.has('ALL')) return all;
    return all.filter(c => selG.has(c.name[0]));
  };

  const next = () => {
    let filt = getFilt();
    if (!filt.length) return;
    let sel;
    if (mode === 'recap') {
      if (queue.length === 0) { alert('Recapモード完了！'); setPrac(false); return; }
      sel = queue[0]; setQueue(queue.slice(1));
    } else if (mode === 'weakness') {
      const weak = filt.filter(c => {
        if (weakSet.has(c.name)) return true;
        if (!c.times || c.times.length === 0) return true;
        return c.times.reduce((a, b) => a + b, 0) / c.times.length > 5000;
      });
      if (Math.random() < 0.2 && weak.length > 0) sel = weak[Math.floor(Math.random() * weak.length)];
      else { filt = filt.filter(c => !weak.includes(c)); if (!filt.length) filt = getFilt(); sel = filt[Math.floor(Math.random() * filt.length)]; }
    } else sel = filt[Math.floor(Math.random() * filt.length)];
    const sl = SCRAMBLES[sel.name] || [];
    let baseScr = sl[Math.floor(Math.random() * sl.length)] || '';
    
    // ランダム回転記号を追加
    const rotations = ['U', "U'", 'U2', "U2'", ''];
    const preRot = rotations[Math.floor(Math.random() * rotations.length)];
    const postRot = rotations[Math.floor(Math.random() * rotations.length)];
    const finalScr = [preRot, baseScr, postRot].filter(x => x).join(' ');
    
    if (curr) {
      const saved = localStorage.getItem('megaminx-cases');
      const latest = saved ? JSON.parse(saved) : cases;
      setPrev(latest.find(c => c.name === curr.name) || curr);
    }
    setCurr(sel); setScr(finalScr);
    setT(0); setRun(false); setRdy(false); setPrac(true);
  };

  const startP = m => {
    setMode(m);
    const f = getFilt();
    if (!f.length) return;
    if (m === 'recap') setQueue([...f].sort(() => Math.random() - 0.5));
    next();
  };

  const fmt = ms => {
    const m = Math.floor(ms / 60000), s = Math.floor((ms % 60000) / 1000), cs = Math.floor((ms % 1000) / 10);
    return `${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}.${cs.toString().padStart(2, '0')}`;
  };

  const getSt = ts => {
    if (!ts || !ts.length) return { best: '-', avg: '-', count: 0 };
    const best = Math.min(...ts), avg = ts.reduce((a, b) => a + b, 0) / ts.length;
    return { best: fmt(best), avg: fmt(avg), count: ts.length };
  };

  const getAllAvg = () => {
    if (!Array.isArray(cases)) return '-';
    const all = cases.flatMap(c => c.times || []);
    return all.length === 0 ? '-' : fmt(all.reduce((a, b) => a + b, 0) / all.length);
  };

  const getSorted = () => {
    if (!Array.isArray(cases)) return [];
    const cs = cases.map(c => ({ ...c, avg: c.times?.length ? c.times.reduce((a, b) => a + b, 0) / c.times.length : Infinity }));
    switch (sort) {
      case 'count': return cs.sort((a, b) => (b.times?.length || 0) - (a.times?.length || 0));
      case 'fast': return cs.sort((a, b) => a.avg === Infinity ? 1 : b.avg === Infinity ? -1 : a.avg - b.avg);
      case 'slow': return cs.sort((a, b) => a.avg === Infinity && b.avg === Infinity ? 0 : a.avg === Infinity ? -1 : b.avg === Infinity ? 1 : b.avg - a.avg);
      default: return cs.sort((a, b) => a.name.localeCompare(b.name));
    }
  };

  const SortBtn = ({ m, txt }) => (
    <button onClick={() => setSort(m)} className={`px-4 py-2 rounded-lg text-sm font-semibold ${sort === m ? 'bg-purple-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-200'}`}>{txt}</button>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-100 p-6">
      <div className="max-w-6xl mx-auto space-y-6">
        {stat ? (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <button onClick={() => setStat(false)} className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-lg font-semibold">← 戻る</button>
              <h2 className="text-3xl font-bold text-purple-900">統計情報</h2>
              <div className="w-24"></div>
            </div>
            <div className="bg-white rounded-2xl shadow-xl p-8">
              <div className="bg-gray-100 p-4 rounded-lg mb-6">
                <div className="text-sm font-semibold text-gray-700 mb-3">並び替え:</div>
                <div className="flex flex-wrap gap-2">
                  <SortBtn m="name" txt="名前順" />
                  <SortBtn m="count" txt="練習回数順" />
                  <SortBtn m="fast" txt="平均速い順" />
                  <SortBtn m="slow" txt="平均遅い順" />
                </div>
              </div>
              {cases.length > 0 ? (
                <div className="space-y-4">
                  {getSorted().map(c => {
                    const st = getSt(c.times);
                    return (
                      <div key={c.id} className="bg-gray-50 rounded-lg p-4">
                        <div className="font-semibold text-gray-800 mb-2 text-lg">{c.name}</div>
                        <div className="grid grid-cols-3 gap-4 text-sm mb-3">
                          <div><span className="text-gray-600">ベスト: </span><span className="font-bold">{st.best}</span></div>
                          <div><span className="text-gray-600">平均: </span><span className="font-bold">{st.avg}</span></div>
                          <div><span className="text-gray-600">回数: </span><span className="font-bold">{st.count}</span></div>
                        </div>
                        {c.times?.length > 0 && (
                          <div>
                            <div className="text-xs text-gray-600 mb-2">記録履歴:</div>
                            <div className="flex flex-wrap gap-2">
                              {c.times.map((x, i) => (
                                <div key={i} className="bg-white px-2 py-1 rounded text-xs font-mono flex items-center gap-1">
                                  {fmt(x)}<button onClick={() => setCases(cases.map(y => y.id === c.id ? { ...y, times: y.times.filter((_, j) => j !== i) } : y))} className="text-red-500 hover:text-red-700">×</button>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              ) : <p className="text-gray-500 text-center py-8">まだ記録がありません</p>}
            </div>
          </div>
        ) : prac ? (
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex items-center justify-between">
              <button onClick={() => setPrac(false)} className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-lg font-semibold">← 戻る</button>
              <span className={`px-3 py-1 rounded-lg font-semibold ${mode === 'random' ? 'bg-purple-100 text-purple-700' : mode === 'recap' ? 'bg-blue-100 text-blue-700' : 'bg-orange-100 text-orange-700'}`}>
                {mode === 'random' ? 'ランダム' : mode === 'recap' ? `Recap (残り${queue.length})` : '苦手克服'}
              </span>
            </div>
            {curr && (
              <>
                <div className="bg-white rounded-2xl shadow-xl p-8">
                  {scr && <div className="bg-purple-50 rounded-lg p-6"><div className="text-sm font-semibold text-gray-700 mb-2">スクランブル:</div><div className="text-lg font-mono text-gray-800 break-all">{scr}</div></div>}
                </div>
                <div className={`bg-white rounded-2xl shadow-xl p-8 select-none ${rdy ? 'ring-4 ring-green-400' : ''}`} onTouchStart={ts} onTouchEnd={te} style={{ WebkitUserSelect: 'none', WebkitTouchCallout: 'none', userSelect: 'none', touchAction: 'none' }}>
                  <div className="text-center">
                    <div className="text-6xl font-mono font-bold text-gray-800 mb-4">{fmt(t)}</div>
                    <p className="text-sm text-gray-600">{rdy ? '画面から指を離してスタート...' : '画面を長押ししてスタンバイ'}</p>
                  </div>
                </div>
                {prev && (
                  <div className="bg-white rounded-2xl shadow-xl p-6">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-bold text-gray-800">前回: {prev.name}</h3>
                      <button onClick={() => setWeakCases(weakSet.has(prev.name) ? weakCases.filter(x => x !== prev.name) : [...weakCases, prev.name])} className={`px-4 py-2 rounded-lg font-semibold text-sm ${weakSet.has(prev.name) ? 'bg-red-500 text-white hover:bg-red-600' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}>
                        {weakSet.has(prev.name) ? '✓ 苦手登録済み' : '苦手に登録'}
                      </button>
                    </div>
                    <div className="grid grid-cols-2 gap-3 mb-3">
                      <div className="bg-yellow-50 rounded-lg p-3"><div className="text-xs text-gray-600 mb-1">前回のタイム</div><div className="text-xl font-bold text-yellow-700">{prevT > 0 ? fmt(prevT) : '-'}</div></div>
                      <div className="bg-indigo-50 rounded-lg p-3"><div className="text-xs text-gray-600 mb-1">このケースの平均</div><div className="text-xl font-bold text-indigo-700">{prev.times?.length ? fmt(prev.times.reduce((a, b) => a + b, 0) / prev.times.length) : '-'}</div></div>
                    </div>
                    {prev.times?.length > 0 && (
                      <div className="grid grid-cols-3 gap-3 text-center">
                        <div className="bg-blue-50 rounded-lg p-3"><div className="text-xs text-gray-600 mb-1">ベストタイム</div><div className="text-lg font-bold text-blue-600">{getSt(prev.times).best}</div></div>
                        <div className="bg-green-50 rounded-lg p-3"><div className="text-xs text-gray-600 mb-1">練習回数</div><div className="text-lg font-bold text-green-600">{getSt(prev.times).count}回</div></div>
                        <div className="bg-purple-50 rounded-lg p-3"><div className="text-xs text-gray-600 mb-1">全体平均</div><div className="text-lg font-bold text-purple-600">{getAllAvg()}</div></div>
                      </div>
                    )}
                  </div>
                )}
              </>
            )}
          </div>
        ) : (
          <>
            <div className="text-center mb-8">
              <h1 className="text-4xl font-bold text-purple-900 mb-2">メガミンクス PLL 練習ツール</h1>
              <p className="text-gray-600">登録数: {Array.isArray(cases) ? cases.length : 0} / 151</p>
              <button onClick={() => setStat(true)} className="mt-4 bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-2 rounded-lg font-semibold inline-flex items-center gap-2"><BarChart3 size={20} />統計モードを開く</button>
            </div>
            <div className="bg-white rounded-2xl shadow-xl p-6">
              <div className="flex items-center gap-2 mb-3"><Filter size={20} className="text-gray-600" /><span className="font-semibold text-gray-800">練習モード選択</span></div>
              <div className="grid grid-cols-3 gap-3 mb-6">
                <button onClick={() => startP('random')} disabled={!getFilt().length} className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 text-white px-6 py-4 rounded-lg font-semibold"><div className="text-lg mb-1">ランダム</div><div className="text-xs opacity-90">選択ケースからランダム出題</div></button>
                <button onClick={() => startP('recap')} disabled={!getFilt().length} className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-6 py-4 rounded-lg font-semibold"><div className="text-lg mb-1">Recap</div><div className="text-xs opacity-90">全ケース1回ずつ練習</div></button>
                <button onClick={() => startP('weakness')} disabled={!getFilt().length} className="bg-orange-600 hover:bg-orange-700 disabled:bg-gray-400 text-white px-6 py-4 rounded-lg font-semibold"><div className="text-lg mb-1">苦手克服</div><div className="text-xs opacity-90">苦手ケースを重点的に</div></button>
              </div>
              <div className="border-t pt-4">
                <div className="flex items-center gap-2 mb-3"><Filter size={20} className="text-gray-600" /><span className="font-semibold text-gray-800">グループ選択:</span><span className="text-sm text-gray-600">{selG.size === 0 && selC.size === 0 ? '(未選択)' : selG.has('ALL') ? '(全て選択中)' : selC.size > 0 ? `(${selC.size}ケース選択中)` : `(${selG.size}グループ選択中)`}</span></div>
                <div className="flex flex-wrap gap-2 mb-4">{getL().map(l => <button key={l} onClick={() => togG(l)} className={`px-3 py-1 rounded-lg font-semibold ${selG.has(l) ? 'bg-purple-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}>{l}</button>)}</div>
                {Array.from(selG).filter(g => g !== 'ALL').map(l => (
                  <div key={l} className="mb-3 border-t pt-3">
                    <button onClick={() => setExp(p => { const n = new Set(p); n.has(l) ? n.delete(l) : n.add(l); return n; })} className="flex items-center gap-2 text-purple-700 hover:text-purple-900 font-semibold mb-2"><span className={`transition-transform ${exp.has(l) ? 'rotate-90' : ''}`}>▶</span>{l}グループ ({CASES.filter(c => c.startsWith(l)).length}ケース)</button>
                    {exp.has(l) && <div className="ml-6 flex flex-wrap gap-2">{CASES.filter(c => c.startsWith(l)).map(c => <button key={c} onClick={() => setSelC(p => { const n = new Set(p); n.has(c) ? n.delete(c) : n.add(c); return n; })} className={`px-2 py-1 rounded text-sm font-medium ${selC.has(c) ? 'bg-pink-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}>{c}</button>)}</div>}
                  </div>
                ))}
              </div>
            </div>
            <div className="bg-white rounded-2xl shadow-xl p-8">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-2xl font-bold text-gray-800">ケース登録</h3>
                <button onClick={() => setForm(!form)} className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg flex items-center gap-2">{form ? <X size={20} /> : <Plus size={20} />} {form ? '閉じる' : '新規登録'}</button>
              </div>
              {form && (
                <div className="space-y-4 border-t pt-4">
                  <select value={newC.name} onChange={e => setNewC({ ...newC, name: e.target.value })} className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none"><option value="">選択してください</option>{CASES.map(n => <option key={n} value={n}>{n}</option>)}</select>
                  <input type="text" placeholder="スクランブル" value={newC.scramble} onChange={e => setNewC({ ...newC, scramble: e.target.value })} className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none" />
                  <input type="text" placeholder="手順" value={newC.algorithm} onChange={e => setNewC({ ...newC, algorithm: e.target.value })} className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none" />
                  <input ref={file} type="file" accept="image/*" onChange={e => { const f = e.target.files[0]; if (f) { const r = new FileReader(); r.onloadend = () => setNewC({ ...newC, image: r.result }); r.readAsDataURL(f); }}} className="hidden" />
                  <button onClick={() => file.current?.click()} className="w-full px-4 py-2 border-2 border-gray-300 rounded-lg hover:border-purple-500 flex items-center justify-center gap-2"><Upload size={20} />画像をアップロード</button>
                  {newC.image && <img src={newC.image} alt="preview" className="mt-2 max-w-xs rounded" />}
                  <button onClick={() => { 
                    if (newC.name.trim()) { 
                      const newCaseData = { 
                        id: Date.now(), 
                        name: newC.name,
                        scramble: newC.scramble,
                        algorithm: newC.algorithm,
                        image: newC.image,
                        times: [] 
                      };
                      setCases(Array.isArray(cases) ? [...cases, newCaseData] : [newCaseData]); 
                      setNewC({ name: '', scramble: '', algorithm: '', image: '' }); 
                      setForm(false); 
                    }
                  }} disabled={!newC.name} className="w-full bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 text-white py-2 rounded-lg font-semibold">追加</button>
                </div>
              )}
            </div>
            <div className="bg-white rounded-2xl shadow-xl p-8">
              <h3 className="text-2xl font-bold text-gray-800 mb-4">登録済みケース ({Array.isArray(cases) ? cases.length : 0})</h3>
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {Array.isArray(cases) && cases.length > 0 ? cases.map(c => (
                  <div key={c.id} className="flex items-center justify-between bg-gray-50 p-4 rounded-lg hover:bg-gray-100">
                    <div className="flex items-center gap-4 flex-1">
                      {c.image && <img src={c.image} alt={c.name} className="w-16 h-16 object-cover rounded" />}
                      <div className="flex-1">
                        <div className="font-semibold text-gray-800">{c.name}</div>
                        {c.algorithm && <div className="text-sm text-gray-600 font-mono">{c.algorithm}</div>}
                        <div className="text-xs text-gray-500 mt-1">記録: {c.times?.length || 0}回</div>
                      </div>
                    </div>
                    <button onClick={() => setCases(cases.filter(x => x.id !== c.id))} className="text-red-600 hover:text-red-800 p-2"><Trash2 size={20} /></button>
                  </div>
                )) : <p className="text-gray-500 text-center py-8">ケースが登録されていません</p>}
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
}
